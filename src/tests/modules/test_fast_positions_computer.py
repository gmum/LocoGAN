import unittest
import torch
from modules.fast_positions_computer import FastPositionsComputer

from modules.position_upsampler import PositionUpsampler


class TestFastPositionsComputer(unittest.TestCase):

    def test_without_border_size(self):
        # Arrange
        test_input_image = torch.randn((1, 18, 4, 4))
        start_x = torch.FloatTensor([3.0])
        start_y = torch.FloatTensor([2.0])
        chunk_size = torch.FloatTensor([4.0])
        uut = FastPositionsComputer(noise_border_width=0, image_size=8)

        # Act
        output_image, computed_positions = uut((test_input_image, start_x, start_y, chunk_size))

        # Assert
        self.assertTrue(torch.all(torch.eq(output_image, test_input_image)))
        expected_positions = torch.FloatTensor([[[[-0.3750, -0.3750, -0.3750, -0.3750],
                                                  [-0.1250, -0.1250, -0.1250, -0.1250],
                                                  [0.1250,  0.1250,  0.1250,  0.1250],
                                                  [0.3750,  0.3750,  0.3750,  0.3750]],

                                                 [[-0.1250,  0.1250,  0.3750,  0.6250],
                                                  [-0.1250,  0.1250,  0.3750,  0.6250],
                                                  [-0.1250,  0.1250,  0.3750,  0.6250],
                                                  [-0.1250,  0.1250,  0.3750,  0.6250]]]])
        self.assertTrue(torch.all(torch.eq(expected_positions, computed_positions)))

    def test_with_border_size(self):
        # Arrange
        test_input_image = torch.randn((1, 18, 8, 8))
        start_x = torch.FloatTensor([3.0])
        start_y = torch.FloatTensor([2.0])
        chunk_size = torch.FloatTensor([4.0])
        uut = FastPositionsComputer(noise_border_width=2, image_size=8)

        # Act
        output_image, computed_positions = uut((test_input_image, start_x, start_y, chunk_size))

        # Assert
        self.assertTrue(torch.all(torch.eq(output_image, test_input_image)))
        expected_positions = torch.FloatTensor([[[[-0.8750, -0.8750, -0.8750, -0.8750, -0.8750, -0.8750, -0.8750,
                                                   -0.8750],
                                                  [-0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250,
                                                   -0.6250],
                                                  [-0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750,
                                                   -0.3750],
                                                  [-0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250,
                                                   -0.1250],
                                                  [0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250,
                                                   0.1250],
                                                  [0.3750,  0.3750,  0.3750,  0.3750,  0.3750,  0.3750,  0.3750,
                                                   0.3750],
                                                  [0.6250,  0.6250,  0.6250,  0.6250,  0.6250,  0.6250,  0.6250,
                                                   0.6250],
                                                  [0.8750,  0.8750,  0.8750,  0.8750,  0.8750,  0.8750,  0.8750,
                                                   0.8750]],

                                                 [[-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                   1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250],
                                                  [-0.6250, -0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750,
                                                     1.1250]]]])
        self.assertTrue(torch.all(torch.eq(expected_positions, computed_positions)))

    def test_with_border_size_and_rescaling(self):
        # Arrange
        test_input_image = torch.randn((1, 18, 4, 4))
        start_x = torch.FloatTensor([3.0])
        start_y = torch.FloatTensor([2.0])
        chunk_size = torch.FloatTensor([4.0])

        uut = FastPositionsComputer(noise_border_width=1, image_size=8)

        # Act
        output_image, computed_positions = uut((test_input_image, start_x, start_y, chunk_size))

        # Assert
        self.assertTrue(torch.all(torch.eq(output_image, test_input_image)))
        expected_positions = torch.FloatTensor([[[[-0.7500, -0.7500, -0.7500, -0.7500],
                                                  [-0.2500, -0.2500, -0.2500, -0.2500],
                                                  [0.2500,  0.2500,  0.2500,  0.2500],
                                                  [0.7500,  0.7500,  0.7500,  0.7500]],

                                                 [[-0.5000,  0.0000,  0.5000,  1.0000],
                                                  [-0.5000,  0.0000,  0.5000,  1.0000],
                                                  [-0.5000,  0.0000,  0.5000,  1.0000],
                                                  [-0.5000,  0.0000,  0.5000,  1.0000]]]])
        self.assertTrue(torch.all(torch.eq(expected_positions, computed_positions)))

    def test_complex_scenario_with_the_same_chunk_size(self):
        # Arrange
        test_input_image = torch.randn((3, 18, 6, 6))
        start_x = torch.FloatTensor([3.0, 1.0, 5.0])
        start_y = torch.FloatTensor([2.0, 0.0, 2.0])
        chunk_size = torch.FloatTensor([4.0, 4.0, 4.0])
        uut = FastPositionsComputer(noise_border_width=1, image_size=8)

        # Act
        output_image, computed_positions = uut((test_input_image, start_x, start_y, chunk_size))

        # Assert
        self.assertTrue(torch.all(torch.eq(output_image, test_input_image)))
        expected_positions = torch.FloatTensor([[[[-0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250],
                                                  [-0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750],
                                                  [-0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250],
                                                  [0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250],
                                                  [0.3750,  0.3750,  0.3750,  0.3750,  0.3750,  0.3750],
                                                  [0.6250,  0.6250,  0.6250,  0.6250,  0.6250,  0.6250]],

                                                 [[-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750]]],


                                                [[[-1.1250, -1.1250, -1.1250, -1.1250, -1.1250, -1.1250],
                                                  [-0.8750, -0.8750, -0.8750, -0.8750, -0.8750, -0.8750],
                                                    [-0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250],
                                                    [-0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750],
                                                    [-0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250],
                                                    [0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250]],

                                                 [[-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750],
                                                    [-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750],
                                                    [-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750],
                                                    [-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750],
                                                    [-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750],
                                                    [-0.8750, -0.6250, -0.3750, -0.1250,  0.1250,  0.3750]]],


                                                [[[-0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250],
                                                  [-0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750],
                                                    [-0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250],
                                                    [0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250],
                                                    [0.3750,  0.3750,  0.3750,  0.3750,  0.3750,  0.3750],
                                                    [0.6250,  0.6250,  0.6250,  0.6250,  0.6250,  0.6250]],

                                                 [[0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750],
                                                    [0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750],
                                                    [0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750],
                                                    [0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750],
                                                    [0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750],
                                                    [0.1250,  0.3750,  0.6250,  0.8750,  1.1250,  1.3750]]]])
        self.assertTrue(torch.all(torch.isclose(expected_positions, computed_positions, atol=1e-3, rtol=1e-3)))

    def test_complex_scenario_with_different_chunk_size(self):
        # Arrange
        test_input_image = torch.randn((3, 18, 6, 6))
        start_x = torch.FloatTensor([3.0, 1.0, 5.0])
        start_y = torch.FloatTensor([2.0, 0.0, 2.0])
        chunk_size = torch.FloatTensor([4.0, 8.0, 8.0])
        uut = FastPositionsComputer(noise_border_width=1, image_size=8)

        # Act
        output_image, computed_positions = uut((test_input_image, start_x, start_y, chunk_size))

        # Assert
        self.assertTrue(torch.all(torch.eq(output_image, test_input_image)))
        expected_positions = torch.FloatTensor([[[[-0.6250, -0.6250, -0.6250, -0.6250, -0.6250, -0.6250],
                                                  [-0.3750, -0.3750, -0.3750, -0.3750, -0.3750, -0.3750],
                                                  [-0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250],
                                                  [0.1250,  0.1250,  0.1250,  0.1250,  0.1250,  0.1250],
                                                  [0.3750,  0.3750,  0.3750,  0.3750,  0.3750,  0.3750],
                                                  [0.6250,  0.6250,  0.6250,  0.6250,  0.6250,  0.6250]],

                                                 [[-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750],
                                                  [-0.3750, -0.1250,  0.1250,  0.3750,  0.6250,  0.8750]]],

                                                [[[-1.2500, -1.2500, -1.2500, -1.2500, -1.2500, -1.2500],
                                                  [-0.7500, -0.7500, -0.7500, -0.7500, -0.7500, -0.7500],
                                                    [-0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500],
                                                    [0.2500,  0.2500,  0.2500,  0.2500,  0.2500,  0.2500],
                                                    [0.7500,  0.7500,  0.7500,  0.7500,  0.7500,  0.7500],
                                                    [1.2500,  1.2500,  1.2500,  1.2500,  1.2500,  1.2500]],

                                                 [[-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000],
                                                    [-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000],
                                                    [-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000],
                                                    [-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000],
                                                    [-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000],
                                                    [-1.0000, -0.5000,  0.0000,  0.5000,  1.0000,  1.5000]]],


                                                [[[-0.7500, -0.7500, -0.7500, -0.7500, -0.7500, -0.7500],
                                                  [-0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500],
                                                    [0.2500,  0.2500,  0.2500,  0.2500,  0.2500,  0.2500],
                                                    [0.7500,  0.7500,  0.7500,  0.7500,  0.7500,  0.7500],
                                                    [1.2500,  1.2500,  1.2500,  1.2500,  1.2500,  1.2500],
                                                    [1.7500,  1.7500,  1.7500,  1.7500,  1.7500,  1.7500]],

                                                 [[0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000],
                                                    [0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000],
                                                    [0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000],
                                                    [0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000],
                                                    [0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000],
                                                    [0.0000,  0.5000,  1.0000,  1.5000,  2.0000,  2.5000]]]])

        self.assertTrue(torch.all(torch.isclose(expected_positions, computed_positions, atol=1e-3, rtol=1e-3)))
